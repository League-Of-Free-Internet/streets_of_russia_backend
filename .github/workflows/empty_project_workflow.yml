name: App code style workflow

on: [ push ]

env:
  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
  DEBUG: ${{ secrets.DEBUG }}
  PROJECT_FOLDER: ${{ secrets.PROJECT_FOLDER }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  test_project:
    name: Test Project ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    env:
      GITHUB_WORKFLOW: True

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_action_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r /requirements/develop.txt

      - name: Test with flake8
        run: flake8

      - name: Test with black
        run: black .

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL..."
          attempt_counter=0
          max_attempts=10
          
          until nc -z localhost 5432; do
            if [ $attempt_counter -eq $max_attempts ]; then
              echo "Failed to connect to PostgreSQL after $max_attempts attempts"
              exit 1
            fi
          
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
            attempt_counter=$((attempt_counter+1))
          done
          
          echo "PostgreSQL is up - continuing"

      - name: Set up database
        run: |
          python src/manage.py makemigrations users
          python src/manage.py migrate

      - name: Django Unit Test
        run: python src/manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: test_project

    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          file: Dockerfile
          push: true
          tags: chemisto/street_russia_backend:latest

  deploy:
    name: Deploy on Server
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub

    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ secrets.SERVER_PROJECT_FOLDER }}
            docker compose down
            docker compose pull
            touch .env
            echo "DB_ENGINE=${{ secrets.DB_ENGINE }}
            DB_NAME=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}" > .env.db
            docker compose up -d
